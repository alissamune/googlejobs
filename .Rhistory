ylab("Number of times requested") +
ggtitle("Necessary years of experience x Number of times they were requested by Category") +
theme_bw() +
facet_wrap(.~ category, nrow = 3)
dfMQPlot
geom_errorbar(aes(ymin = mean(dfMinQualPlot$numberOfTimes), ymax = mean(dfMinQualPlot$numberOfTimes)),linetype = "longdash")
dfMQPlot
dfMQPlot <- ggplot(dfMinQualPlot, aes(x = reorder(dfMinQualPlot$necessaryYears, necessaryYears), y = dfMinQualPlot$numberOfTimes), fill = "category") +
geom_bar(stat = 'identity') +
xlab("Necessary years of experience") +
ylab("Number of times requested") +
ggtitle("Necessary years of experience x Number of times they were requested by Category") +
theme_bw() +
facet_wrap(.~ category, nrow = 3)
dfMQPlot
dfMQPlot + geom_errorbar(aes(ymin = mean(dfMinQualPlot$numberOfTimes), ymax = mean(dfMinQualPlot$numberOfTimes)),linetype = "longdash")
dfMQPlot + geom_errorbar(aes(ymin = mean(dfMinQualPlot$numberOfTimes), ymax = mean(dfMinQualPlot$numberOfTimes), fill = dfMinQualPlot$category),linetype = "longdash")
dfMQPlot + geom_line(aes(x = mean(dfMinQualPlot$numberOfTimes)))
dfMQPlot + geom_line(aes(y = mean(dfMinQualPlot$numberOfTimes)))
dfMQPlot + geom_line(aes(y = mean(dfMinQualPlot$numberOfTimes, colour = "red")))
dfMQPlot + geom_line(aes(y = numberOfTimes.mean), color = "red")
dfMQPlot + geom_line(aes(y = numberOfTimes), color = "red")
dfMQPlot + geom_line(aes(x = numberOfTimes), color = "red")
dfMQPlot + geom_line(aes(x = mean(numberOfTimes)), color = "red")
dfMQPlot + geom_line(aes(x = mean(necessaryYears)), color = "red")
dfMQPlot + geom_line(aes(y = mean(necessaryYears)), color = "red")
dfMQPlot + geom_line(aes(x = mean(necessaryYears)), color = "red")
dfMQPlot + geom_line(aes(x = mean(numberOfTimes), y = mean(necessaryYears)), color = "red")
class(dfMinQualPlot$numberOfTimes)
class(dfMinQualPlot$necessaryYears)
mean(dfMinQualPlot$numberOfTimes)
formattable(dfMinQualPlot)
View(dfMinQualPlot)
dfMinQualPlotMean <- dfMinQualPlot %>% group_by(category) %>% summarise(mean = mean(necessaryYears))
formattable(dfMinQualPlotMean, )
formattable(dfMinQualPlotMean)
dfMinQualPlotMedian <- dfMinQualPlot %>% group_by(category) %>% summarise(median = median(necessaryYears))
formattable(dfMinQualPlotMedian)
dfMinQualPlotMedian <- dfMinQualPlot %>%
group_by(category) %>%
summarise(median = median(necessaryYears)) %>%
arrange(median)
formattable(dfMinQualPlotMedian)
dfMinQualPlotMedian <- dfMinQualPlot %>%
group_by(category) %>%
summarise(median = median(necessaryYears)) %>%
arrange(desc(median))
formattable(dfMinQualPlotMedian)
medianCategoryTable <- formattable(dfMinQualPlotMedian)
medianCategoryTable
dfMinQualPlotMedian <- dfMinQualPlot %>%
group_by(category) %>%
summarise(median = median(necessaryYears)) %>%
arrange(desc(median))
colnames(dfMinQualPlotMedian) <- c("Category", "Median")
medianCategoryTable <- formattable(dfMinQualPlotMedian)
medianCategoryTable
areas <- unique(df$category)
techAreas <- c("Technical Solutions" ,"Hardware Engineering" ,"Software Engineering","Data Center & Network","Technical Infrastructure", "IT & Data Management","Network Engineering")
dfMinQualTech <- dfMinQual[dfMinQual$category %in% techAreas,]
dfMinQualTech$minimumQualifications <- str_replace_all(dfMinQualTech$minimumQualifications, ",", " ")
dfMinQualTech$minimumQualifications <- str_replace_all(dfMinQualTech$minimumQualifications, "\\.", " ")
languages$name <- str_replace_all(languages$name, "\\/", "\\\\\\\\/")
languages$name <- str_replace_all(languages$name, "\\+", "\\\\\\\\+")
languages$name <- str_replace_all(languages$name, "\\#", "\\\\\\\\#")
languages$name <- str_replace_all(languages$name, "\\!", "\\\\\\\\!")
languages$name <- str_replace_all(languages$name, "\\.", "\\\\\\\\.")
languages$name <- str_replace_all(languages$name, "\\(", "\\\\\\\\(")
languages$name <- str_replace_all(languages$name, "\\)", "\\\\\\\\)")
languages$name <- str_replace_all(languages$name, "\\-", "\\\\\\\\-")
languages$name <- str_replace_all(languages$name, "\\@", "\\\\\\\\@")
techLanguages <- paste(languages$name, collapse = " )|( ")
techLanguages <- paste0("( ",techLanguages," )")
requiredLanguages <- str_extract_all(dfMinQualTech$minimumQualifications, regex(techLanguages))
requiredLanguages
source('~/Analysis/Revelo.R', echo=TRUE)
requiredLanguages
requiredLanguages <- unlist(requiredLanguages)
requiredLanguages <- str_remove_all(requiredLanguages, " ")
requiredLanguages <- as_tibble(requiredLanguages)
requiredLanguages <- requiredLanguages %>% group_by(value) %>% add_tally() %>% unique()
table(df$minimumQualifications)
View(requiredLanguages)
techLanguages
techLanguages <- paste(languages$name, collapse = ")|(")
techLanguages <- paste0("(",techLanguages,")")
techLanguages
requiredLanguages <- str_extract_all(dfMinQualTech$minimumQualifications, regex(techLanguages))
requiredLanguages <- unlist(requiredLanguages)
View(requiredLanguages)
requiredLanguages <- str_extract_all(dfMinQualTech$minimumQualifications, regex(techLanguages, ignore_case = FALSE))
languages <- read_csv("~/Analysis/languages.csv")
areas <- unique(df$category)
techAreas <- c("Technical Solutions" ,"Hardware Engineering" ,"Software Engineering","Data Center & Network","Technical Infrastructure", "IT & Data Management","Network Engineering")
dfMinQualTech <- dfMinQual[dfMinQual$category %in% techAreas,]
dfMinQualTech$minimumQualifications <- str_replace_all(dfMinQualTech$minimumQualifications, ",", " ")
dfMinQualTech$minimumQualifications <- str_replace_all(dfMinQualTech$minimumQualifications, "\\.", " ")
languages$name <- str_replace_all(languages$name, "\\/", "\\\\\\\\/")
languages$name <- str_replace_all(languages$name, "\\+", "\\\\\\\\+")
languages$name <- str_replace_all(languages$name, "\\#", "\\\\\\\\#")
languages$name <- str_replace_all(languages$name, "\\!", "\\\\\\\\!")
languages$name <- str_replace_all(languages$name, "\\.", "\\\\\\\\.")
languages$name <- str_replace_all(languages$name, "\\(", "\\\\\\\\(")
languages$name <- str_replace_all(languages$name, "\\)", "\\\\\\\\)")
languages$name <- str_replace_all(languages$name, "\\-", "\\\\\\\\-")
languages$name <- str_replace_all(languages$name, "\\@", "\\\\\\\\@")
techLanguages <- paste(languages$name, collapse = "[,\s])|(")
techLanguages <- paste(languages$name, collapse = "[,\\s])|(")
techLanguages <- paste0("(",techLanguages,"[,\\s])")
techLanguages
requiredLanguages <- str_extract_all(dfMinQualTech$minimumQualifications, regex(techLanguages, ignore_case = FALSE))
requiredLanguages <- unlist(requiredLanguages)
View(requiredLanguages)
View(dfMinQualPlotMedian)
View(dfMinQualTech)
View(languages)
languages <- read_csv("~/Analysis/languages.csv")
areas <- unique(df$category)
techAreas <- c("Technical Solutions" ,"Hardware Engineering" ,"Software Engineering","Data Center & Network","Technical Infrastructure", "IT & Data Management","Network Engineering")
dfMinQualTech <- dfMinQual[dfMinQual$category %in% techAreas,]
dfMinQualTech$minimumQualifications <- str_replace_all(dfMinQualTech$minimumQualifications, ",", " ")
dfMinQualTech$minimumQualifications <- str_replace_all(dfMinQualTech$minimumQualifications, "\\.", " ")
languages$name <- str_replace_all(languages$name, "\\/", "\\\\\\\\/")
languages$name <- str_replace_all(languages$name, "\\+", "\\\\\\\\+")
languages$name <- str_replace_all(languages$name, "\\#", "\\\\\\\\#")
languages$name <- str_replace_all(languages$name, "\\!", "\\\\\\\\!")
languages$name <- str_replace_all(languages$name, "\\.", "\\\\\\\\.")
languages$name <- str_replace_all(languages$name, "\\(", "\\\\\\\\(")
languages$name <- str_replace_all(languages$name, "\\)", "\\\\\\\\)")
languages$name <- str_replace_all(languages$name, "\\-", "\\\\\\\\-")
languages$name <- str_replace_all(languages$name, "\\@", "\\\\\\\\@")
techLanguages <- paste(languages$name, collapse = "[,\\s])|(\\b")
techLanguages <- paste0("(\\b",techLanguages,"[,\\s])")
requiredLanguages <- str_extract_all(dfMinQualTech$minimumQualifications, regex(techLanguages, ignore_case = FALSE))
requiredLanguages <- unlist(requiredLanguages)
View(requiredLanguages)
requiredLanguages <- str_extract(dfMinQualTech$minimumQualifications, regex(techLanguages, ignore_case = FALSE))
requiredLanguages <- purrr::flatten(requiredLanguages)
View(requiredLanguages)
dfMinQualTech$languages <- str_extract(dfMinQualTech$minimumQualifications, regex(techLanguages, ignore_case = FALSE))
dfMinQualTech$languages[1]
dfMinQualTech[1,]
dfMinQualTech$minimumQualifications[1]
dfMinQualTech$minimumQualifications[2]
dfMinQualTech$minimumQualifications[3]
dfMinQualTech$languages[3]
str_extract(dfMinQualTech$minimumQualifications[3], regex(techLanguages, ignore_case = FALSE))
str_extract_all(dfMinQualTech$minimumQualifications[3], regex(techLanguages, ignore_case = FALSE))
dfMinQualTech$languages <- str_extract_all(dfMinQualTech$minimumQualifications[3], regex(techLanguages, ignore_case = FALSE))
View(dfMinQualTech)
dfMinQualTech$languages <- str_extract_all(dfMinQualTech$minimumQualifications, regex(techLanguages, ignore_case = FALSE))
requiredLanguages <- purrr::flatten(dfMinQualTech)
View(requiredLanguages)
requiredLanguages[[1]]
requiredLanguages <- unlist(dfMinQualTech)
requiredLanguages <- unlist(dfMinQualTech$languages)
View(requiredLanguages)
languages <- read_csv("~/Analysis/languages.csv")
techAreas <- c("Technical Solutions" ,"Hardware Engineering" ,"Software Engineering","Data Center & Network","Technical Infrastructure", "IT & Data Management","Network Engineering")
dfMinQualTech <- dfMinQual[dfMinQual$category %in% techAreas,]
dfMinQualTech$minimumQualifications <- str_replace_all(dfMinQualTech$minimumQualifications, ",", " ")
dfMinQualTech$minimumQualifications <- str_replace_all(dfMinQualTech$minimumQualifications, "\\.", " ")
languages$name <- str_replace_all(languages$name, "\\/", "\\\\\\\\/")
languages$name <- str_replace_all(languages$name, "\\+", "\\\\\\\\+")
languages$name <- str_replace_all(languages$name, "\\#", "\\\\\\\\#")
languages$name <- str_replace_all(languages$name, "\\!", "\\\\\\\\!")
languages$name <- str_replace_all(languages$name, "\\.", "\\\\\\\\.")
languages$name <- str_replace_all(languages$name, "\\(", "\\\\\\\\(")
languages$name <- str_replace_all(languages$name, "\\)", "\\\\\\\\)")
languages$name <- str_replace_all(languages$name, "\\-", "\\\\\\\\-")
languages$name <- str_replace_all(languages$name, "\\@", "\\\\\\\\@")
techLanguages <- paste(languages$name, collapse = "[,\\s\\)])|(\\b")
techLanguages <- paste0("(\\b",techLanguages,"[,\\s\\)])")
dfMinQualTech$languages <- str_extract_all(dfMinQualTech$minimumQualifications, regex(techLanguages, ignore_case = FALSE))
View(dfMinQualTech)
View(languages)
x <- str_extract_all(dfMinQualTech$minimumQualifications[21], regex(techLanguages, ignore_case = FALSE))
View(x)
View(techLanguages)
techLanguages
languages <- read_csv("~/Analysis/languages.csv")
languages$name <- str_replace_all(languages$name, regex("\\+"), "\\+")
View(languages)
languages$name <- str_replace_all(languages$name, regex("\\+"), "\\\+")
languages$name <- str_replace_all(languages$name, regex("\\+"), "\\\\+")
languages$name <- str_replace_all(languages$name, "\\/", "\\\\/")
languages$name <- str_replace_all(languages$name, regex("\\+"), "\\\\+")
languages$name <- str_replace_all(languages$name, "\\#", "\\\\#")
languages$name <- str_replace_all(languages$name, "\\!", "\\\\!")
languages$name <- str_replace_all(languages$name, "\\.", "\\\\.")
languages$name <- str_replace_all(languages$name, "\\(", "\\\\(")
languages$name <- str_replace_all(languages$name, "\\)", "\\\\)")
languages$name <- str_replace_all(languages$name, "\\-", "\\\\-")
languages$name <- str_replace_all(languages$name, "\\@", "\\\\@")
techLanguages <- paste(languages$name, collapse = "[,\\s\\)])|(\\b")
techLanguages <- paste0("(\\b",techLanguages,"[,\\s\\)])")
x <- str_extract_all(dfMinQualTech$minimumQualifications[21], regex(techLanguages, ignore_case = FALSE))
View(x)
languages <- read_csv("~/Analysis/languages.csv")
areas <- unique(df$category)
techAreas <- c("Technical Solutions" ,"Hardware Engineering" ,"Software Engineering","Data Center & Network","Technical Infrastructure", "IT & Data Management","Network Engineering")
dfMinQualTech <- dfMinQual[dfMinQual$category %in% techAreas,]
dfMinQualTech$minimumQualifications <- str_replace_all(dfMinQualTech$minimumQualifications, ",", " ")
dfMinQualTech$minimumQualifications <- str_replace_all(dfMinQualTech$minimumQualifications, "\\.", " ")
languages$name <- str_replace_all(languages$name, "\\/", "[\\\\/]")
languages$name <- str_replace_all(languages$name, regex("\\+"), "[\\\\+]")
languages$name <- str_replace_all(languages$name, "\\#", "[\\\\#]")
languages$name <- str_replace_all(languages$name, "\\!", "[\\\\!]")
languages$name <- str_replace_all(languages$name, "\\.", "[\\\\.]")
languages$name <- str_replace_all(languages$name, "\\(", "[\\\\(]")
languages$name <- str_replace_all(languages$name, "\\)", "[\\\\)]")
languages$name <- str_replace_all(languages$name, "\\-", "[\\\\-]")
languages$name <- str_replace_all(languages$name, "\\@", "[\\\\@]")
techLanguages <- paste(languages$name, collapse = "[,\\s\\)])|(\\b")
techLanguages <- paste0("(\\b",techLanguages,"[,\\s\\)])")
x <- str_extract_all(dfMinQualTech$minimumQualifications[21], regex(techLanguages, ignore_case = FALSE))
View(x)
dfMinQualTech$languages <- str_extract_all(dfMinQualTech$minimumQualifications, regex(techLanguages, ignore_case = FALSE))
View(dfMinQualTech)
requiredLanguages <- unlist(dfMinQualTech$languages)
requiredLanguages <- str_remove_all(requiredLanguages, " ")
requiredLanguages <- as_tibble(requiredLanguages)
View(requiredLanguages)
requiredLanguages <- requiredLanguages %>% group_by(value) %>% add_tally() %>% unique()
wcloud <- wordcloud2(requiredLanguages)
htmlwidgets::saveWidget(wcloud,paste0("wcloud_",i,".html"),selfcontained = F)
htmlwidgets::saveWidget(wcloud,paste0("languages_wcloud_.html"),selfcontained = F)
requiredLanguages <- str_remove_all(requiredLanguages, "\\)")
wcloud <- wordcloud2(requiredLanguages)
htmlwidgets::saveWidget(wcloud,paste0("languages_wcloud_.html"),selfcontained = F)
wcloud <- wordcloud2(requiredLanguages, size = 2)
wcloud <- wordcloud2(requiredLanguages, size = 0.5)
wcloud <- wordcloud2(requiredLanguages, size = 1)
wcloud <- wordcloud2(requiredLanguages)
wcloud <- wordcloud2(requiredLanguages$value)
requiredLanguages <- as_tibble(str_remove_all(requiredLanguages, "\\)"))
wcloud <- wordcloud2(requiredLanguages$value)
wcloud <- wordcloud2(requiredLanguages, size = 2)
requiredLanguages <- as_tibble(requiredLanguages)
View(wcloud)
requiredLanguages <- unlist(dfMinQualTech$languages)
requiredLanguages <- str_remove_all(requiredLanguages, " ")
requiredLanguages <- as_tibble(requiredLanguages)
requiredLanguages <- requiredLanguages %>% group_by(value) %>% add_tally() %>% unique()
requiredLanguages <- astr_remove_all(requiredLanguages, "\\)")
requiredLanguages <- as_tibble(requiredLanguages)
requiredLanguages <- str_remove_all(requiredLanguages, "\\)")
requiredLanguages <- as_tibble(requiredLanguages)
wcloud <- wordcloud2(requiredLanguages$value)
View(requiredLanguages)
requiredLanguages <- unlist(dfMinQualTech$languages)
requiredLanguages <- str_remove_all(requiredLanguages, " ")
requiredLanguages <- str_remove_all(requiredLanguages, "\\)")
requiredLanguages <- as_tibble(requiredLanguages)
requiredLanguages <- requiredLanguages %>% group_by(value) %>% add_tally() %>% unique()
wcloud <- wordcloud2(requiredLanguages$value)
wcloud <- wordcloud2(requiredLanguages)
htmlwidgets::saveWidget(wcloud,paste0("languages_wcloud_.html"),selfcontained = F)
wcloud <- wordcloud2(requiredLanguages, size = 2)
htmlwidgets::saveWidget(wcloud,paste0("languages_wcloud_.html"),selfcontained = F)
wcloud <- wordcloud2(requiredLanguages, size = 0.5)
htmlwidgets::saveWidget(wcloud,paste0("languages_wcloud_.html"),selfcontained = F)
requiredLanguages <- unlist(dfMinQualTech)
requiredLanguages <- unnest(dfMinQualTech, languages)
View(requiredLanguages)
requiredLanguages <- requiredLanguages %>% group_by(category) %>% add_tally() %>% unique()
requiredLanguages <- unnest(dfMinQualTech, languages)
requiredLanguages2 <- requiredLanguages %>%
select(category, languages) %>%
group_by(category) %>%
add_tally() %>%
unique()
View(requiredLanguages2)
View(requiredLanguages2)
rm(requiredLanguages)
requiredLanguages <- unnest(dfMinQualTech, languages)
requiredLanguages2 <- requiredLanguages %>%
select(category, languages) %>%
group_by(category, languages) %>%
add_tally() %>%
unique()
requiredLanguages <- unnest(dfMinQualTech, languages)
requiredLanguages <- str_remove_all(requiredLanguages$languages, "\\)")
requiredLanguages2 <- requiredLanguages %>%
select(category, languages) %>%
group_by(category, languages) %>%
add_tally() %>%
unique()
requiredLanguages <- unnest(dfMinQualTech, languages)
requiredLanguages$languages <- str_remove_all(requiredLanguages$languages, "\\)")
requiredLanguages2 <- requiredLanguages %>%
select(category, languages) %>%
group_by(category, languages) %>%
add_tally() %>%
unique()
requiredLanguages <- unnest(dfMinQualTech, languages)
requiredLanguages$languages <- str_remove_all(requiredLanguages$languages, "\\)")
requiredLanguagesGraph <- requiredLanguages %>%
select(category, languages) %>%
group_by(category, languages) %>%
add_tally() %>%
unique()
requiredLanguagesWordcloud <- requiredLanguages$languages
ggplot(requiredLanguagesGraph, aes(x = languages, y = n, fill = category)) %>%
geom_bar(stat = 'identity')
ggplot(requiredLanguagesGraph, aes(x = languages, y = n, fill = category)) +
geom_bar(stat = 'identity')
ggplot(requiredLanguagesGraph, aes(x = languages, y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge')
ggplot(requiredLanguagesGraph, aes(x = languages, y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(~.category)
ggplot(requiredLanguagesGraph, aes(x = languages, y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(~category)
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(~category)
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(~category, scales = 'free')
requiredLanguages <- requiredLanguages[requiredLanguages$languages != "D",]
requiredLanguagesGraph <- requiredLanguages %>%
select(category, languages) %>%
group_by(category, languages) %>%
add_tally() %>%
unique()
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(~category, scales = 'free')
requiredLanguages <- requiredLanguages[requiredLanguages$languages != "D",]
requiredLanguagesGraph <- requiredLanguages %>%
select(category, languages) %>%
group_by(category, languages) %>%
add_tally() %>%
unique()
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(~category, scales = 'free')
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(~category, scales = 'free')
View(requiredLanguages)
requiredLanguages[-requiredLanguages$languages == "D",]
requiredLanguages <- requiredLanguages[-which(requiredLanguages$languages == " D"),]
requiredLanguages <- unnest(dfMinQualTech, languages)
requiredLanguages$languages <- str_remove_all(requiredLanguages$languages, "\\)")
which(requiredLanguages$languages == " D")
which(requiredLanguages$languages == "D ")
requiredLanguages <- requiredLanguages[-which(requiredLanguages$languages == "D "),]
requiredLanguagesGraph <- requiredLanguages %>%
select(category, languages) %>%
group_by(category, languages) %>%
add_tally() %>%
unique()
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(~category, scales = 'free')
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
theme(axis.text.x = element_text(angle = 30) ) +
facet_wrap(~category, scales = 'free')
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
theme(axis.text.x = element_text(angle = 45) ) +
facet_wrap(~category, scales = 'free')
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 1) ) +
facet_wrap(~category, scales = 'free')
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 10.5) ) +
facet_wrap(~category, scales = 'free')
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = -0.5) ) +
facet_wrap(~category, scales = 'free')
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5) ) +
facet_wrap(~category, scales = 'free')
View(requiredLanguagesGraph)
requiredLanguages <- unnest(dfMinQualTech, languages)
requiredLanguages$languages <- str_remove_all(requiredLanguages$languages, "\\)")
requiredLanguages$languages <- str_remove_all(requiredLanguages$languages, " ")
requiredLanguages <- requiredLanguages[-which(requiredLanguages$languages == "D "),]
requiredLanguagesGraph <- requiredLanguages %>%
select(category, languages) %>%
group_by(category, languages) %>%
add_tally() %>%
unique()
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5) ) +
facet_wrap(~category, scales = 'free')
View(requiredLanguagesGraph)
requiredLanguages <- unnest(dfMinQualTech, languages)
requiredLanguages$languages <- str_remove_all(requiredLanguages$languages, "\\)")
requiredLanguages$languages <- str_replace_all(requiredLanguages$languages, " ", "")
requiredLanguages <- requiredLanguages[-which(requiredLanguages$languages == "D "),]
requiredLanguagesGraph <- requiredLanguages %>%
select(category, languages) %>%
group_by(category, languages) %>%
add_tally() %>%
unique()
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5) ) +
facet_wrap(~category, scales = 'free')
requiredLanguages <- unnest(dfMinQualTech, languages)
requiredLanguages$languages <- str_remove_all(requiredLanguages$languages, "\\)")
requiredLanguages$languages <- str_replace_all(requiredLanguages$languages, " ", "")
requiredLanguages <- requiredLanguages[-which(requiredLanguages$languages == "D"),]
requiredLanguagesGraph <- requiredLanguages %>%
select(category, languages) %>%
group_by(category, languages) %>%
add_tally() %>%
unique()
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5) ) +
facet_wrap(~category, scales = 'free')
requiredLanguages <- requiredLanguages[-which(requiredLanguages$languages == "D"|requiredLanguages$languages == "T"),]
requiredLanguagesGraph <- requiredLanguages %>%
select(category, languages) %>%
group_by(category, languages) %>%
add_tally() %>%
unique()
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5) ) +
facet_wrap(~category, scales = 'free')
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
labs(fill = "Category") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5) ) +
facet_wrap(~category, scales = 'free')
View(requiredLanguagesGraph)
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
labs(fill = "Category") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, lineheight = 2) ) +
facet_wrap(~category, scales = 'free')
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
labs(fill = "Category") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, lineheight = 10) ) +
facet_wrap(~category, scales = 'free')
ggplot(requiredLanguagesGraph, aes(x = reorder(languages, -n), y = n, fill = category)) +
geom_bar(stat = 'identity', position = 'dodge') +
xlab("Languages") +
ylab("Count") +
labs(fill = "Category") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, lineheight = 0) ) +
facet_wrap(~category, scales = 'free')
requiredLanguagesWordcloud <- requiredLanguages$languages
wcloud <- wordcloud2(requiredLanguagesWordcloud, size = 0.5)
requiredLanguagesWordcloud
wordcloud2(requiredLanguagesWordcloud, size = 0.5)
requiredLanguagesWordcloud <- as.data.frame(requiredLanguagesWordcloud)
wcloud <- wordcloud2(requiredLanguagesWordcloud$requiredLanguagesWordcloud, size = 0.5)
wcloud <- wordcloud2(requiredLanguagesWordcloud, size = 0.5)
requiredLanguagesWordcloud <- requiredLanguages$languages
wcloud <- wordcloud2(requiredLanguagesWordcloud, size = 0.5)
wordcloud2(requiredLanguagesWordcloud, size = 0.5)
wcloud <- wordcloud2(requiredLanguagesWordcloud)
requiredLanguagesWordcloud <- as.data.frame(requiredLanguagesWordcloud)
wcloud <- wordcloud2(requiredLanguagesWordcloud)
wcloud <- wordcloud2(requiredLanguagesWordcloud$requiredLanguagesWordcloud)
wcloud <- wordcloud2(requiredLanguagesGraph)
requiredLanguagesWordcloud <- requiredLanguagesGraph
requiredLanguagesWordcloud$category <- NULL
wcloud <- wordcloud2(requiredLanguagesGraph)
wcloud <- wordcloud2(requiredLanguagesGraph$languages)
wcloud <- wordcloud2(requiredLanguagesGraph$n)
View(requiredLanguagesWordcloud)
requiredLanguagesWordcloud <- requiredLanguages %>%
select(languages) %>%
group_by(languages) %>%
add_tally() %>%
unique()
wcloud <- wordcloud2(requiredLanguagesGraph$n)
wcloud <- wordcloud2(requiredLanguagesGraph)
wcloud <- wordcloud2(requiredLanguagesWordcloud)
wcloud
